/*
@title:  BrainBoom
@author: Kapilarny
@tags: []
@addedOn: 2024-00-00
*/

// -------------------
// BF implementation
// -------------------

// Data cells
let data_cells = [];
let data_cells_size = 5;
let data_pointer = 0;

// Output cells
let output_cells = [];
let output_size = 5;
let output_pointer = output_size; // back to front

// Fill data cells with 0
for(let i = 0; i < data_cells_size; i++) {
  data_cells.push(0);
}

// Fill output cells with 0
for(let i = 0; i < output_size; i++) {
  output_cells.push(0);
}

let loop_stack = [];

const run_program = (program) => {
    console.log(`Running program -> ${program}`);
  
    let instructions = program.split('');
    for(let i = 0; i < instructions.length; i++) {
        if(instructions[i] === "E") break;
        
        if(instructions[i] === "[") {
            loop_stack.push(i);
            continue;
        }

        if(instructions[i] === "]") {
            let start = loop_stack.pop();
            if(data_cells[data_pointer] !== 0) {
                i = start-1;
            }
          
            continue;
        }

        run_instruction(instructions[i]);
    }

    console.log(`Data cells: ${data_cells}`);
    console.log(`Output cells: ${output_cells}`);
};

const run_instruction = (instruction) => {
    // console.log(`Running inst => ${instruction}`);
  
    switch(instruction) {
        case "+":
            data_cells[data_pointer]++;
            break;
        case "-":
            data_cells[data_pointer]--;
            break;
        case ">":
            data_pointer--;
            break;
        case "<":
            data_pointer++;
            break;
        case ".":
            output_cells[output_pointer] = data_cells[data_pointer];
            if(output_pointer !== 0) output_pointer--;
            break;
        case ",":
            // Not implemented
            break;
        default:
            console.log(`Unrecognized instruction! ${instruction}`);
            break;
    }
};

let instruction_set = ["+", "-", "<", ">", "[", "]", ".", ",", "E"];

// const program = "+++[<++>-]<.";
// run_program(program);

// -------------------
// Game implementation
// -------------------

const player = "p";
const box = "b";
const sel_box = "s";

const add = "0";
const sub = "1";
const shift_right = "2";
const shift_left = "3";
const open_loop = "4";
const close_loop = "5";
const output = "6";
const input = "7";
const end = "8";

setLegend(
    [ player, bitmap`
................
................
.......000......
.......0.0......
......0..0......
......0...0.0...
....0003.30.0...
....0.0...000...
....0.05550.....
......0...0.....
.....0....0.....
.....0...0......
......000.......
......0.0.......
.....00.00......
................` ], 
    [ box, bitmap`
................
.00000000000000.
.0............0.
.0............0.
.0............0.
.0............0.
.0............0.
.0............0.
.0............0.
.0............0.
.0............0.
.0............0.
.0............0.
.0............0.
.00000000000000.
................`],
    [ sel_box, bitmap`
3333333333333333
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3..............3
3333333333333333`],
    [ add, bitmap`
................
.......00.......
.......00.......
.......00.......
.......00.......
.......00.......
.......00.......
.00000000000000.
.00000000000000.
.......00.......
.......00.......
.......00.......
.......00.......
.......00.......
.......00.......
................` ],
    [ sub, bitmap`
................
................
................
................
................
................
................
.00000000000000.
.00000000000000.
................
................
................
................
................
................
................` ],
    [ shift_right, bitmap`
................
........00......
.......00.......
......00........
.....00.........
....00..........
...00...........
..00............
..00............
...00...........
....00..........
.....00.........
......00........
.......00.......
........00......
................` ],
    [ shift_left, bitmap`
................
......00........
.......00.......
........00......
.........00.....
..........00....
...........00...
............00..
............00..
...........00...
..........00....
.........00.....
........00......
.......00.......
......00........
................` ],
    [ open_loop, bitmap`
................
................
................
...000000.......
...0............
...0............
...0............
...0............
...0............
...0............
...0............
...0............
...000000.......
................
................
................` ],
    [ close_loop, bitmap`
................
................
................
.......000000...
............0...
............0...
............0...
............0...
............0...
............0...
............0...
............0...
.......000000...
................
................
................` ],
    [ output, bitmap`
................
................
................
................
................
................
................
................
................
................
......000.......
......000.......
......000.......
................
................
................` ],
    [ input, bitmap`
................
................
................
................
................
................
................
................
................
................
.......0........
......00........
.....00.........
.....0..........
................
................` ],
    [ end, bitmap`
................
................
................
..000...........
..0.............
..0.............
..0.............
..000...........
..0...0..0.00...
..0...00.0.0.0..
..0...0.00.00...
..0...0..0......
..000...........
................
................
................` ]
)

// setSolids([])

let level = 0
const levels = [
  map`
p.........
..........
..........
..........
..........
.sbbbbbbb.
..........
..........`
]

const input_disabled = false;

let selected = 0;
const max_selected = 7;

let offset = 0;

let program = [];

// Fill program out with blanks
for(var i = 0; i < max_selected+1; i++) {
  program.push(-1);
}

setMap(levels[level])

// setPushables({
//   [ player ]: []
// })

const render_box = (box_sprite) => {
    clearTile(selected+1, 5);
    addSprite(selected+1, 5, box_sprite);
    if(program[offset + selected] !== -1) {
        const op_sprite = parseInt(program[offset + selected]);
        addSprite(selected+1, 5, op_sprite);
    }
};

onInput("d", () => {
    if(input_disabled) return;
  
    if(selected === max_selected) return;
  
    render_box(box);
    selected++;
    render_box(sel_box);
});

onInput("a", () => {
    if(input_disabled) return;
    
    if(selected === 0) return;
  
    render_box(box);
    selected--;
    render_box(sel_box);
});

onInput("j", () => {
    if(input_disabled) return;
  
    if(program[offset + selected] === 8) program[offset + selected] = -1;
    else program[offset + selected]++;

    render_box(sel_box);
});

onInput("l", () => {
    if(input_disabled) return;
  
    if(program[offset + selected] === -1) program[offset + selected] = 8;
    else program[offset + selected]--;

    render_box(sel_box);
});

afterInput(() => {
  
})
